// ============================================================================
//
// Copyright (C) 2006-2017 Talend Inc. - www.talend.com
//
// This source code is available under agreement available at
// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
//
// You should have received a copy of the agreement
// along with this program; if not, write to Talend SA
// 9 rue Pages 92150 Suresnes, France
//
// ============================================================================
package org.talend.components.marketo.tmarketoinput;

import static org.slf4j.LoggerFactory.getLogger;
import static org.talend.daikon.properties.presentation.Widget.widget;
import static org.talend.daikon.properties.property.PropertyFactory.newBoolean;
import static org.talend.daikon.properties.property.PropertyFactory.newEnum;
import static org.talend.daikon.properties.property.PropertyFactory.newInteger;
import static org.talend.daikon.properties.property.PropertyFactory.newString;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.slf4j.Logger;
import org.talend.components.api.component.Connector;
import org.talend.components.api.component.ISchemaListener;
import org.talend.components.api.component.PropertyPathConnector;
import org.talend.components.marketo.MarketoComponentProperties;
import org.talend.components.marketo.helpers.IncludeExcludeTypesTable;
import org.talend.components.marketo.helpers.MarketoColumnMappingsTable;
import org.talend.components.marketo.tmarketoconnection.TMarketoConnectionProperties.APIMode;
import org.talend.daikon.avro.SchemaConstants;
import org.talend.daikon.properties.presentation.Form;
import org.talend.daikon.properties.presentation.Widget;
import org.talend.daikon.properties.property.Property;

public class TMarketoInputProperties extends MarketoComponentProperties {

    static final Logger LOG = getLogger(TMarketoInputProperties.class);

    public enum Operation {
        getLead, // retrieves basic information of leads and lead activities in Marketo DB. getLead:
        getMultipleLeads, // retrieves lead records in batch.
        getLeadActivity, // retrieves the history of activity records for a single lead identified by the provided key.
        getLeadChanges // checks the changes on Lead data in Marketo DB.
    }

    public enum LeadSelector {
        LeadKeySelector,
        StaticListSelector,
        LastUpdateAtSelector
    }

    public enum LeadKeyTypeREST {
        id,
        cookie,
        email,
        twitterId,
        facebookId,
        linkedInId,
        sfdcAccountId,
        sfdcContactId,
        sfdcLeadId,
        sfdcLeadOwnerId,
        sfdcOpptyId
    }

    public enum LeadKeyTypeSOAP {

        IDNUM, // The Marketo ID (e.g. 64)
        COOKIE, // The value generated by the Munchkin Javascript.
        EMAIL, // The email address associated with the lead. (e.g. rufus@marketo.com)
        SFDCLEADID, // The lead ID from SalesForce
        LEADOWNEREMAIL, // The Lead Owner Email
        SFDCACCOUNTID, // The Account ID from SalesForce
        SFDCCONTACTID, // The Contact ID from SalesForce
        SFDCLEADOWNERID, // The Lead owner ID from SalesForce
        SFDCOPPTYID, // The Opportunity ID from SalesForce

    }

    public enum ListParam {
        STATIC_LIST_NAME,
        STATIC_LIST_ID
    }

    public enum IncludeExcludeFieldsSOAP {
        VisitWebpage,
        FillOutForm,
        ClickLink,
        RegisterForEvent,
        AttendEvent,
        SendEmail,
        EmailDelivered,
        EmailBounced,
        UnsubscribeEmail,
        OpenEmail,
        ClickEmail,
        NewLead,
        ChangeDataValue,
        LeadAssigned,
        NewSFDCOpprtnty,
        Wait,
        RunSubflow,
        RemoveFromFlow,
        PushLeadToSales,
        CreateTask,
        ConvertLead,
        ChangeScore,
        ChangeOwner,
        AddToList,
        RemoveFromList,
        SFDCActivity,
        EmailBouncedSoft,
        PushLeadUpdatesToSales,
        DeleteLeadFromSales,
        SFDCActivityUpdated,
        SFDCMergeLeads,
        MergeLeads,
        ResolveConflicts,
        AssocWithOpprtntyInSales,
        DissocFromOpprtntyInSales,
        UpdateOpprtntyInSales,
        DeleteLead,
        SendAlert,
        SendSalesEmail,
        OpenSalesEmail,
        ClickSalesEmail,
        AddtoSFDCCampaign,
        RemoveFromSFDCCampaign,
        ChangeStatusInSFDCCampaign,
        ReceiveSalesEmail,
        InterestingMoment,
        RequestCampaign,
        SalesEmailBounced,
        ChangeLeadPartition,
        ChangeRevenueStage,
        ChangeRevenueStageManually,
        ComputeDataValue,
        ChangeStatusInProgression,
        ChangeFieldInProgram,
        EnrichWithDatacom,
        ChangeSegment,
        ComputeSegmentation,
        ResolveRuleset,
        SmartCampaignTest,
        SmartCampaignTestTrigger
    }

    public enum IncludeExcludeFieldsREST {
        VisitWebpage(1),
        FillOutForm(2),
        ClickLink(3),
        SendEmail(6),
        EmailDelivered(7),
        EmailBounced(8),
        UnsubscribeEmail(9),
        OpenEmail(10),
        ClickEmail(11),
        NewLead(12),
        ChangeDataValue(13),
        SyncLeadToSFDC(19),
        ConvertLead(21),
        ChangeScore(22),
        ChangeOwner(23),
        AddToList(24),
        RemoveFromList(25),
        SFDCActivity(26),
        EmailBouncedSoft(27),
        DeleteLeadFromSFDC(29),
        SFDCActivityUpdated(30),
        MergeLeads(32),
        AddToOpportunity(34),
        RemoveFromOpportunity(35),
        UpdateOpportunity(36),
        DeleteLead(37),
        SendAlert(38),
        SendSalesEmail(39),
        OpenSalesEmail(40),
        ClickSalesEmail(41),
        AddToSFDCCampaign(42),
        RemoveFromSFDCCampaign(43),
        ChangeStatusInSFDCCampaign(44),
        ReceiveSalesEmail(45),
        InterestingMoment(46),
        RequestCampaign(47),
        SalesEmailBounced(48),
        ChangeLeadPartition(100),
        ChangeRevenueStage(101),
        ChangeRevenueStageManually(102),
        ChangeStatusInProgression(104),
        EnrichWithDataCom(106),
        ChangeSegment(108),
        CallWebhook(110),
        SentForwardToFriendEmail(111),
        ReceivedForwardToFriendEmail(112),
        AddToNurture(113),
        ChangeNurtureTrack(114),
        ChangeNurtureCadence(115),
        ShareContent(400),
        VoteInPoll(401),
        ClickSharedLink(405);

        public int fieldVal;

        private static Map<Integer, IncludeExcludeFieldsREST> map = new HashMap<Integer, IncludeExcludeFieldsREST>();

        static {
            for (IncludeExcludeFieldsREST fv : IncludeExcludeFieldsREST.values()) {
                map.put(fv.fieldVal, fv);
            }
        }

        IncludeExcludeFieldsREST(final int fv) {
            fieldVal = fv;
        }

        public static IncludeExcludeFieldsREST valueOf(int fv) {
            return map.get(fv);
        }

    }

    public Property<Operation> operation = newEnum("operation", Operation.class).setRequired();

    public MarketoColumnMappingsTable mappingInput = new MarketoColumnMappingsTable("mappingInput");

    public Property<LeadSelector> leadSelectorSOAP = newEnum("leadSelectorSOAP", LeadSelector.class).setRequired();

    public Property<LeadSelector> leadSelectorREST = newEnum("leadSelectorREST", LeadSelector.class).setRequired();

    public Property<LeadKeyTypeREST> leadKeyTypeREST = newEnum("leadKeyTypeREST", LeadKeyTypeREST.class);

    public Property<LeadKeyTypeSOAP> leadKeyTypeSOAP = newEnum("leadKeyTypeSOAP", LeadKeyTypeSOAP.class);

    public Property<String> leadKeyValue = newString("leadKeyValue");

    public Property<String> leadKeyValues = newString("leadKeyValues");

    public Property<Integer> leadKeysSegmentSize = newInteger("leadKeysSegmentSize");

    public Property<ListParam> listParam = newEnum("listParam", ListParam.class);

    public Property<String> listParamValue = newString("listParamValue");

    public Property<String> fieldList = newString("fieldList");

    public Property<String> oldestCreateDate = newString("oldestCreateDate");

    public Property<String> oldestUpdateDate = newString("oldestUpdateDate");

    public Property<String> latestUpdateDate = newString("latestUpdateDate");

    public Property<String> latestCreateDate = newString("latestCreateDate");

    public Property<String> sinceDateTime = newString("sinceDateTime");

    public Property<Integer> maxReturn = newInteger("maxReturn");

    public Property<Boolean> setIncludeTypes = newBoolean("setIncludeTypes");

    public IncludeExcludeTypesTable includeTypes = new IncludeExcludeTypesTable("includeTypes");

    public Property<Boolean> setExcludeTypes = newBoolean("setExcludeTypes");

    public IncludeExcludeTypesTable excludeTypes = new IncludeExcludeTypesTable("excludeTypes");

    public Property<String> customObjectName = newString("customObjectName");

    public Property<String> customObjectNames = newString("customObjectNames");

    public Property<String> customObjectFilterType = newString("customObjectFilterType");

    public Property<String> customObjectFilterValues = newString("customObjectFilterValues");

    private static final long serialVersionUID = 3335746787979781L;

    public TMarketoInputProperties(String name) {
        super(name);
    }

    @Override
    public Schema getSchema(Connector connector, boolean isOutputConnection) {
        return schemaInput.schema.getValue();
    }

    @Override
    protected Set<PropertyPathConnector> getAllSchemaPropertiesConnectors(boolean isOutputConnection) {
        if (isOutputConnection) {
            return Collections.singleton(MAIN_CONNECTOR);
        }
        return Collections.emptySet();
    }

    @Override
    public void setupProperties() {
        super.setupProperties();
        //
        operation.setPossibleValues((Object[]) Operation.values());
        operation.setValue(Operation.getLead);
        leadSelectorSOAP.setPossibleValues((Object[]) LeadSelector.values());
        leadSelectorSOAP.setValue(LeadSelector.LeadKeySelector);
        leadSelectorREST.setPossibleValues(LeadSelector.LeadKeySelector, LeadSelector.StaticListSelector);
        leadSelectorREST.setValue(LeadSelector.LeadKeySelector);

        schemaInput.schema.setValue(getRESTSchemaForGetLeadOrGetMultipleLeads());
        setSchemaListener(new ISchemaListener() {

            @Override
            public void afterSchema() {
                LOG.debug("afterSchema");
                updateMappings();
                refreshLayout(getForm(Form.MAIN));
            }
        });

        setIncludeTypes.setValue(false);
        includeTypes.type.setPossibleValues((Object[]) IncludeExcludeFieldsREST.values());
        setExcludeTypes.setValue(false);
        excludeTypes.type.setPossibleValues((Object[]) IncludeExcludeFieldsREST.values());
        fieldList.setValue("");
        leadKeysSegmentSize.setValue(50);
        maxReturn.setValue(100);
        sinceDateTime.setValue("yyyy-MM-dd HH:mm:ss Z");
        //
        // Custom Objects
        //
        customObjectName.setValue("");
        customObjectNames.setValue("");
        customObjectFilterType.setValue("");
        customObjectFilterValues.setValue("");
    }

    @Override
    public void setupLayout() {
        super.setupLayout();

        Form mainForm = getForm(Form.MAIN);
        mainForm.addRow(operation);
        mainForm.addRow(widget(mappingInput).setWidgetType(Widget.TABLE_WIDGET_TYPE));
        // leadSelector
        mainForm.addRow(leadSelectorSOAP);
        mainForm.addRow(leadSelectorREST);
        mainForm.addRow(leadKeyTypeREST);
        mainForm.addRow(leadKeyTypeSOAP);
        mainForm.addRow(leadKeyValue);
        mainForm.addRow(leadKeyValues);
        //
        mainForm.addRow(listParam);
        mainForm.addColumn(listParamValue);
        //
        mainForm.addRow(oldestCreateDate);
        mainForm.addColumn(latestCreateDate);
        //
        mainForm.addRow(oldestUpdateDate);
        mainForm.addColumn(latestUpdateDate);
        //
        mainForm.addRow(setIncludeTypes);
        mainForm.addRow(widget(includeTypes).setWidgetType(Widget.TABLE_WIDGET_TYPE));
        mainForm.addRow(setExcludeTypes);
        mainForm.addRow(widget(excludeTypes).setWidgetType(Widget.TABLE_WIDGET_TYPE));
        //
        mainForm.addRow(fieldList);
        mainForm.addRow(sinceDateTime);
        //
        mainForm.addRow(batchSize);
        mainForm.addRow(dieOnError);
    }

    @Override
    public void refreshLayout(Form form) {
        super.refreshLayout(form);

        schemaInput.refreshLayout(schemaInput.getForm(Form.MAIN));
        schemaInput.refreshLayout(schemaInput.getForm(Form.REFERENCE));
        mappingInput.refreshLayout(mappingInput.getForm(Form.MAIN));

        boolean useSOAP = connection.apiMode.getValue().equals(APIMode.SOAP);
        if (form.getName().equals(Form.MAIN)) {
            // first hide everything
            form.getWidget(leadSelectorSOAP.getName()).setVisible(false);
            form.getWidget(leadSelectorREST.getName()).setVisible(false);
            form.getWidget(leadKeyTypeSOAP.getName()).setVisible(false);
            form.getWidget(leadKeyTypeREST.getName()).setVisible(false);
            form.getWidget(leadKeyValue.getName()).setVisible(false);
            form.getWidget(leadKeyValues.getName()).setVisible(false);
            form.getWidget(listParam.getName()).setVisible(false);
            form.getWidget(listParamValue.getName()).setVisible(false);
            form.getWidget(oldestUpdateDate.getName()).setVisible(false);
            form.getWidget(latestUpdateDate.getName()).setVisible(false);
            form.getWidget(setIncludeTypes.getName()).setVisible(false);
            form.getWidget(setExcludeTypes.getName()).setVisible(false);
            form.getWidget(includeTypes.getName()).setVisible(false);
            form.getWidget(excludeTypes.getName()).setVisible(false);
            form.getWidget(fieldList.getName()).setVisible(false);
            form.getWidget(sinceDateTime.getName()).setVisible(false);
            form.getWidget(oldestCreateDate.getName()).setVisible(false);
            form.getWidget(latestCreateDate.getName()).setVisible(false);
            form.getWidget(batchSize.getName()).setVisible(false);
            //
            // enable widgets according params
            //
            // getLead
            if (operation.getValue().equals(Operation.getLead)) {
                form.getWidget(leadKeyValue.getName()).setVisible(true);
                if (useSOAP) {
                    form.getWidget(leadKeyTypeSOAP.getName()).setVisible(true);
                } else {
                    form.getWidget(leadKeyTypeREST.getName()).setVisible(true);
                }
            }
            // getMultipleLeads
            if (operation.getValue().equals(Operation.getMultipleLeads)) {
                if (useSOAP) {
                    form.getWidget(leadSelectorSOAP.getName()).setVisible(true);
                    switch (leadSelectorSOAP.getValue()) {
                    case LeadKeySelector:
                        form.getWidget(leadKeyTypeSOAP.getName()).setVisible(true);
                        form.getWidget(leadKeyValues.getName()).setVisible(true);
                        break;
                    case StaticListSelector:
                        form.getWidget(listParam.getName()).setVisible(true);
                        form.getWidget(listParamValue.getName()).setVisible(true);
                        break;
                    case LastUpdateAtSelector:
                        form.getWidget(oldestUpdateDate.getName()).setVisible(true);
                        form.getWidget(latestUpdateDate.getName()).setVisible(true);
                        break;
                    }
                } else {
                    form.getWidget(leadSelectorREST.getName()).setVisible(true);
                    switch (leadSelectorREST.getValue()) {
                    case LeadKeySelector:
                        form.getWidget(leadKeyTypeREST.getName()).setVisible(true);
                        form.getWidget(leadKeyValues.getName()).setVisible(true);
                        break;
                    case StaticListSelector:
                        form.getWidget(listParam.getName()).setVisible(true);
                        form.getWidget(listParamValue.getName()).setVisible(true);
                        break;
                    }
                }
            }
            // getLeadActivity
            if (operation.getValue().equals(Operation.getLeadActivity)) {
                if (useSOAP) {
                    form.getWidget(leadKeyTypeSOAP.getName()).setVisible(true);
                    form.getWidget(leadKeyValue.getName()).setVisible(true);
                } else {
                    form.getWidget(sinceDateTime.getName()).setVisible(true);
                }
                form.getWidget(setIncludeTypes.getName()).setVisible(true);
                form.getWidget(includeTypes.getName()).setVisible(setIncludeTypes.getValue());
                form.getWidget(setExcludeTypes.getName()).setVisible(true);
                form.getWidget(excludeTypes.getName()).setVisible(setExcludeTypes.getValue());
                form.getWidget(batchSize.getName()).setVisible(true);
            }
            // getLeadChanges
            if (operation.getValue().equals(Operation.getLeadChanges)) {
                if (useSOAP) {
                    form.getWidget(setIncludeTypes.getName()).setVisible(true);
                    form.getWidget(includeTypes.getName()).setVisible(setIncludeTypes.getValue());
                    form.getWidget(setExcludeTypes.getName()).setVisible(true);
                    form.getWidget(excludeTypes.getName()).setVisible(setExcludeTypes.getValue());
                    form.getWidget(oldestCreateDate.getName()).setVisible(true);
                    form.getWidget(latestCreateDate.getName()).setVisible(true);
                } else {
                    form.getWidget(fieldList.getName()).setVisible(true);
                    form.getWidget(sinceDateTime.getName()).setVisible(true);
                }
                form.getWidget(batchSize.getName()).setVisible(true);
            }
        }
    }

    public void updateMappings() {
        List<String> fld = getSchemaFields();
        mappingInput.schemaColumnName.setPossibleValues(fld);
        mappingInput.schemaColumnName.setValue(fld);
        List<String> mcn = new ArrayList<>();
        for (String t : fld)
            mcn.add("");
        mappingInput.marketoColumnName.setValue(mcn);
    }

    public void updateSchemaRelated() {
        Schema s = null;
        if (connection.apiMode.getValue().equals(APIMode.SOAP)) {
            switch (operation.getValue()) {
            case getLead:
            case getMultipleLeads:
                s = getSOAPSchemaForGetLeadOrGetMultipleLeads();
                break;
            case getLeadActivity:
                s = getSOAPSchemaForGetLeadActivity();
                break;
            case getLeadChanges:
                s = getSOAPSchemaForGetLeadChanges();
                break;
            }
        } else {
            switch (operation.getValue()) {
            case getLead:
            case getMultipleLeads:
                s = getRESTSchemaForGetLeadOrGetMultipleLeads();
                break;
            case getLeadActivity:
                s = getRESTSchemaForGetLeadActivity();
                break;
            case getLeadChanges:
                s = getRESTSchemaForGetLeadChanges();
                break;
            }
        }
        schemaInput.schema.setValue(s);

        updateMappings();
    }

    public void afterOperation() {
        updateSchemaRelated();
        refreshLayout(getForm(Form.MAIN));
    }

    public void afterLeadSelectorSOAP() {
        refreshLayout(getForm(Form.MAIN));
    }

    public void afterLeadSelectorREST() {
        refreshLayout(getForm(Form.MAIN));
    }

    public void afterSetIncludeTypes() {
        refreshLayout(getForm(Form.MAIN));
    }

    public void afterSetExcludeTypes() {
        refreshLayout(getForm(Form.MAIN));
    }

    public void afterApiMode() {
        afterOperation();
    }

    // public ValidationResult afterFetchSchemaFromQuery() {
    // // TODO copied from Jdbc for code pattern, remove or adapt...
    // MarketoRuntimeInfo runtimeInfo = new MarketoRuntimeInfo(MarketoRuntimeInfo.RUNTIME_SOURCE_CLASS);
    // try (SandboxedInstance sandboxI = RuntimeUtil.createRuntimeClass(runtimeInfo,
    // connection.getClass().getClassLoader())) {
    // MarketoSourceOrSinkSchemaProvider ss = (MarketoSourceOrSinkSchemaProvider) sandboxI.getInstance();
    // ss.initialize(null, this);
    // try {
    // Schema schema = ss.getSchemaForParams("dummy");
    // schemaInput.schema.setValue(schema);
    // } catch (Exception e) {
    // LOG.error("failed to retrieve the schema :", e);
    // return new ValidationResult().setStatus(ValidationResult.Result.ERROR).setMessage(e.getCause().getMessage());
    // }
    // }
    // return ValidationResult.OK;
    // }

    public static Schema getRESTSchemaForGetLeadOrGetMultipleLeads() {
        return SchemaBuilder.builder().record("getLeadOrGetMultipleLeads").fields() //
                .name("id").prop(SchemaConstants.TALEND_COLUMN_IS_KEY, "true").type().nullable().intType().noDefault() //
                .name("email").type().nullable().stringType().noDefault() //
                .name("firstName").type().nullable().stringType().noDefault() //
                .name("lastName").type().nullable().stringType().noDefault() //
                .name("createdAt").prop(SchemaConstants.TALEND_COLUMN_PATTERN, "yyyy-MM-dd'T'HH:mm:ssZ").type().nullable()
                .stringType().noDefault() //
                .name("updatedAt").prop(SchemaConstants.TALEND_COLUMN_PATTERN, "yyyy-MM-dd'T'HH:mm:ssZ").type().nullable()
                .stringType().noDefault() //
                .endRecord();
    }

    public static Schema getSOAPSchemaForGetLeadOrGetMultipleLeads() {
        return SchemaBuilder.builder().record("getLeadOrGetMultipleLeads").fields() //
                .name("Id").prop(SchemaConstants.TALEND_COLUMN_IS_KEY, "true").type().nullable().intType().noDefault() //
                .name("Email").type().nullable().stringType().noDefault() //
                .name("ForeignSysPersonId").type().nullable().stringType().noDefault() //
                .name("ForeignSysType").type().nullable().stringType().noDefault() //
                .endRecord();
    }

    public static Schema getRESTSchemaForGetLeadChanges() {
        return SchemaBuilder.builder().record("getLeadChanges").fields() //
                .name("id").prop(SchemaConstants.TALEND_COLUMN_IS_KEY, "true").type().nullable().longType().noDefault() //
                .name("leadId").type().nullable().intType().noDefault() //
                .name("activityDate").prop(SchemaConstants.TALEND_COLUMN_PATTERN, "yyyy-MM-dd'T'HH:mm:ssZ").type().nullable()
                .stringType().noDefault() //
                .name("activityTypeId").type().nullable().intType().noDefault() //
                .name("activityTypeValue").type().nullable().stringType().noDefault() //
                .name("fields").type().nullable().stringType().noDefault() //
                .endRecord();
    }

    public static Schema getSOAPSchemaForGetLeadChanges() {
        return SchemaBuilder.builder().record("getLeadChanges").fields() //
                .name("Id").prop(SchemaConstants.TALEND_COLUMN_IS_KEY, "true").type().nullable().intType().noDefault() //
                .name("ActivityDateTime").prop(SchemaConstants.TALEND_COLUMN_PATTERN, "yyyy-MM-dd'T'HH:mm:ss'.000Z'").type()
                .nullable().stringType().noDefault() //
                .name("ActivityType").type().nullable().stringType().noDefault() //
                .name("MktgAssetName").type().nullable().stringType().noDefault() //
                .name("MktPersonId").type().nullable().stringType().noDefault() //
                .name("Campaign").type().nullable().stringType().noDefault() //
                .endRecord();
    }

    public static Schema getRESTSchemaForGetLeadActivity() {
        return SchemaBuilder.builder().record("getLeadActivity").fields() //
                .name("id").prop(SchemaConstants.TALEND_COLUMN_IS_KEY, "true").type().nullable().longType().noDefault() //
                .name("leadId").type().nullable().intType().noDefault() //
                .name("activityDate").prop(SchemaConstants.TALEND_COLUMN_PATTERN, "yyyy-MM-dd'T'HH:mm:ssZ").type().nullable()
                .stringType().noDefault() //
                .name("activityTypeId").type().nullable().intType().noDefault() //
                .name("activityTypeValue").type().nullable().stringType().noDefault() //
                .name("primaryAttributeValueId").type().nullable().longType().noDefault() //
                .name("primaryAttributeValue").type().nullable().stringType().noDefault() //
                .endRecord();
    }

    public static Schema getSOAPSchemaForGetLeadActivity() {
        return SchemaBuilder.builder().record("getLeadActivity").fields() //
                .name("Id").prop(SchemaConstants.TALEND_COLUMN_IS_KEY, "true").type().nullable().intType().noDefault() //
                .name("ActivityDateTime").prop(SchemaConstants.TALEND_COLUMN_PATTERN, "yyyy-MM-dd'T'HH:mm:ss'.000Z'").type()
                .nullable().stringType().noDefault() //
                .name("ActivityType").type().nullable().stringType().noDefault() //
                .name("MktgAssetName").type().nullable().stringType().noDefault() //
                .name("MktPersonId").type().nullable().stringType().noDefault() //
                .name("Campaign").type().nullable().stringType().noDefault() //
                .name("ForeignSysId").type().nullable().stringType().noDefault() //
                .name("PersonName").type().nullable().stringType().noDefault() //
                .name("OrgName").type().nullable().stringType().noDefault() //
                .name("ForeignSysOrgId").type().nullable().stringType().noDefault() //
                .endRecord();
    }

}
