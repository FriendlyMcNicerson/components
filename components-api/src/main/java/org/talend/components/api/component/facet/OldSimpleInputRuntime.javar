// ============================================================================
//
// Copyright (C) 2006-2015 Talend Inc. - www.talend.com
//
// This source code is available under agreement available at
// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
//
// You should have received a copy of the agreement
// along with this program; if not, write to Talend SA
// 9 rue Pages 92150 Suresnes, France
//
// ============================================================================
package org.talend.components.api.component.facet;

import java.util.List;
import java.util.Map;

import org.talend.components.api.properties.ComponentProperties;
import org.talend.components.api.properties.NameAndLabel;
import org.talend.components.api.properties.ValidationResult;
import org.talend.components.api.runtime.ComponentRuntimeContainer;
import org.talend.components.api.schema.Schema;

/**
 * Simple input component. This component support no input and one output. It contains one schema by default
 *
 */
public abstract class OldSimpleInputRuntime<CurrentProperties extends ComponentProperties, ConnectionProperties extends ComponentProperties> {

    /**
     * Sets the {@link ComponentRuntimeContainer} for this runtime.
     */
    public abstract void setContainer(ComponentRuntimeContainer container);

    /**
     * Connect using the specified {@link ConnectionProperties} returning a {@link ValidationResult}.
     *
     * Once connected, this runtime instance is bound to the connection and the other methods on it may be used.
     */
    public ValidationResult connectWithResult(ConnectionProperties properties) {
        // subclass as required
        return new ValidationResult();
    }

    /**
     * Connect using the specified {@link ConnectionProperties}.
     *
     * Once connected, this runtime instance is bound to the connection and the other methods on it may be used.
     */
    public abstract void connect(ConnectionProperties properties) throws Exception;

    /**
     * Get the list of schema names available on the current connection. {@link #connect(CurrentProperties)} must be
     * called must be called first.
     */
    public abstract List<NameAndLabel> getSchemaNames() throws Exception;

    /**
     * Return the schema associated with the specified schema name. {@link #connect(CurrentProperties)} must be called
     * first.
     *
     * @param schemaName
     */
    public abstract Schema getSchema(String schemaName) throws Exception;

    /**
     * Return the main schema, aka the schema associated with the output flow.
     *
     * @param schemaName
     */
    public abstract Schema getMainSchema() throws Exception;

    /**
     * Reads rows as specified by the {@link CurrentProperties}.
     *
     * Note this will read all of the rows into memory before returning them, so it is not necessarily suitable for
     * large amounts of data. In this case, consider using {@link #inputBegin(CurrentProperties)} and its partner
     * methods instead.
     */
    public void input(CurrentProperties props, List<Map<String, Object>> values) throws Exception {
        inputBegin(props);
        Map<String, Object> value;
        do {
            value = inputRow();
            if (value != null) {
                values.add(value);
            }
        } while (value != null);
    }

    /**
     * Initializes the input process. Used with {@link #inputRow()} to read rows.
     *
     * @param props the {@link CurrentProperties} that are necessary to define the connection.
     * @throws Exception
     */
    public abstract void inputBegin(CurrentProperties props) throws Exception;

    /**
     * Returns a row from the input.
     *
     * {@link #inputBegin(CurrentProperties)} must be called first.
     *
     * @return a {@link Map} of the row, null if there are no more rows
     * @throws Exception
     */
    public abstract Map<String, Object> inputRow() throws Exception;

    /**
     * Called when the input is complete to clean up.
     */
    public abstract void inputEnd() throws Exception;

}
